% znum0.satyg: ZR modules for numbers
%
% Copyright (c) 2019-2020 Takayuki YATO (aka. "ZR")
%   GitHub:   https://github.com/zr-tex8r
%   Twitter:  @zr_tex8r
% Distributed under the MIT License.
@import: zexn0

%=========================================================== module ZNum0
module ZNum0 : sig

% The constant pi.
val pi : float
% pi over 180.
val deg : float
% `powi x y` is x raised to y, where x and y are int.
val powi : int -> int -> int
% `fpowi x y` is x raised to y, where x is int and y is float.
val fpowi : float -> int -> float
% `fnear e x y` tests if the difference of x and y is smaller than or
% equal to e.
val fnear : float -> float -> float -> bool
% `string-of-int-radix r x` returns the string that represents x in
% radix r. The digits after `9` are lowercase alphabet.
val string-of-int-radix : int -> int -> string
% `string-of-int-radix-u r x` returns the string that represents x in
% radix r. The digits after `9` are uppercase alphabet.
val string-of-int-radix-u : int -> int -> string

end = struct
%-------------------
% helpers
let-mutable int-zero <- 0
let int-div-zero () = 1 / !int-zero
let-mutable float-zero <- 0.
let float-div-zero x = x /. !float-zero
let invalid-arg msg =
  ZExn0.raise (ZExn0.make `Invalid_argument` msg)

let pi = 3.141592653589793
let deg = 0.017453292519943295

let powi x y =
  let-rec iter | 1 = x
               | y =
    let a = iter (y mod 2) in
    if y mod 2 == 0 then a * a else a * a * x in
  if x == 0 then
    if y > 0 then 1 else if y == 0 then 1 else int-div-zero ()
  else
    if y > 0 then iter y else if y == 0 then 1 else 0
let fpowi x y =
  let-rec iter | 1 = x
               | y =
    let a = iter (y mod 2) in
    if y mod 2 == 0 then a *. a else a *. a *. x in
  let xl = 1pt *' x in
  if xl >' 0pt || xl <' 0pt then
    if y > 0 then iter y else if y == 0 then 1. else 1. /. iter y
  else
    if y > 0 then x else if y == 0 then 1. else 1. /. x

let fnear e x y =
  let (xl, yl) = (1pt *' x, 1pt *' y) in
  let d = if xl >' yl then xl -' yl else yl -' xl in
  not (d >' 1pt *' e)

let digits-lower = `0123456789abcdefghijklmnopqrstuvwxyz`
let digits-upper = `0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ`

let string-of-int-radix-with dgts bas x =
  let-rec decomp | 0 ds = ds
                 | x ds = decomp (x / bas) ((x mod bas) :: ds) in
  let-rec make | r [] = r
               | r (d::ds) = make (r ^ (string-sub dgts d 1)) ds in
  if bas < 2 || 36 < bas then invalid-arg `invalid radix value`
  else if x >= 0 then decomp x [] |> make ` `
  else decomp (- x) [] |> make `-`
let string-of-int-radix = string-of-int-radix-with digits-lower
let string-of-int-radix-u = string-of-int-radix-with digits-upper

end
%=========================================================== all done
%% EOF
