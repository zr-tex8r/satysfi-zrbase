% zrbase0.satyg: ZR basic package
%
% Copyright (c) 2019-2020 Takayuki YATO (aka. "ZR")
%   GitHub:   https://github.com/zr-tex8r
%   Twitter:  @zr_tex8r
% Distributed under the MIT License.
@import: zp0
@import: zl0
@import: zfmt0
@import: zexn0
@import: zlist0
@import: zlog0
@import: znum0
@import: zresult0
@import: zs0

% This package does the follwoing:
% - Requires several ZR packages (see the actual @import lines).
% - "Opens" the modules ZP0 and ZL0, with a few exceptions.
% - Imports some functions from other (imported) modules.
%    - `fnear` from ZNum0
%    - `debug` `info`, `warn`, `error` from ZLog0, with prefix `z-`
%      (i.e. `z-debug`, `z-info`, `z-warn`, `z-error` are availbale).
%    - `format` from ZFmt0, as `z-format`
% - Defines new functions for formatted log messages:
%    - `z-infof` etc.; this is a simple composition of `z-info` (etc.)
%    - and `format`.
%    - `z-infol` etc.; this is a composition of `z-info` (etc.) and
%      string-concatenation. (See below for usage.)
%
% Examples of formatted log messages:
%    %[info without formatting]
%    z-info `snowman`
%    %--> shows `  [INFO] snowman`
%    %[normal fomatting method]
%    z-infof (fun f -> [`snowman = U+`;f#ux 9731])
%    %--> shows `  [INFO] snowman = U+2603`
%    %[alternative method]
%    let f = ZFmt0.verbs in
%    z-infol [`snowman = U+`;f#ux 9731]
%    %--> shows `  [INFO] snowman = U+2603`
%    % The above example actually does the below:
%    let f = ZFmt0.verbs in
%    z-info (`snowman = U+` ^ f#ux 9731)
%    %--> shows `  [INFO] snowman = U+2603`

%=========================================================== global
%%IMPORT%%
%-------- from ZNum0
let fnear = ZNum0.fnear
%-------- from ZLog0 / ZFmt0
let z-debug = ZLog0.debug
let z-info = ZLog0.info
let z-warn = ZLog0.warn
let z-error = ZLog0.error
let z-format = ZFmt0.format
let z-debugf gen = ZLog0.debug (ZFmt0.format gen)
let z-infof gen = ZLog0.info (ZFmt0.format gen)
let z-warnf gen = ZLog0.warn (ZFmt0.format gen)
let z-errorf en gen = ZLog0.error en (ZFmt0.format gen)
let z-debugl lst = ZLog0.debug (ZFmtIntr0.concat lst)
let z-infol lst = ZLog0.info (ZFmtIntr0.concat lst)
let z-warnl lst = ZLog0.warn (ZFmtIntr0.concat lst)
let z-errorl en lst = ZLog0.error en (ZFmtIntr0.concat lst)
%-------- others
%=========================================================== all done
%% EOF
