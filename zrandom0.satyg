% zrandom0.satyg: ZR modules for formatted strings
%
% Copyright (c) 2019-2020 Takayuki YATO (aka. "ZR")
%   GitHub:   https://github.com/zr-tex8r
%   Twitter:  @zr_tex8r
% Distributed under the MIT License.
@require: zexn0

%=========================================================== module ZRandom0
module ZRandom0 : sig

% type of generator instances
type t

% The following functions operates on the fixed generator instance.

% `init seed` : initializes the generator with a given seed.
val init : int -> unit
% `bits ()` returns a random integer in rage [0, 2**60).
val bits : unit -> int
% `int n` returns a random integer in rage [0, n).
val int : int -> int
% `float r` returns a random integer in rage [0, r].
val float : float -> float
% `bool ()` returns a random boolean.
val bool : unit -> bool

% The following functions operates on a specified generator instance.

% Creates a new generator instance.
val create : int -> t
val bits-with : t -> int
val int-with : t -> int -> int
val float-with : t -> float -> float
val bool-with : t -> bool

end = struct

let order = 12
let warmup-count = 32
let fixed-instance-seed = 123456789

let init-values = [
230843697152193353;
51856673865632002;
1105386323895823368;
1020618168180547486;
145631573507107479;
1134688406673144741;
1152466805467438956;
544739125726630983;
819900008478894385;
650630022596907155;
600244709997183829;
782060305328420660;
427538019490164102;
36772815053548266;
605097721433898784;
617459750744915512;
284631744059148846;
128414827596762378;
]

%-------------------
type t = (int ref) list
let modulus = 1152921504606846976 % 2**60
let max-value = modulus - 1

let-rec repeat | 0 fn v = ()
               | k fn v = let _ = fn v in repeat (k - 1) fn v
let invalid-arg msg =
  ZExn0.raise (ZExn0.make `Invalid_argument` msg)
%let-rec deref | [] = []
%              | (c::cs) = !c :: (deref cs)

let new-cell () =
  let-mutable c <- 0 in c
let new-state : unit -> t | () =
  let-rec iter | 0 cs = cs
               | k cs = iter (k - 1) (new-cell () :: cs) in
  iter (order + 1) []
let next-state stt =
  let-rec iter | [] prv = prv
               | (c::cs) prv =
    let () = c <- !c + prv in
    iter cs !c in
  match stt with (c::cs) -> iter cs !c
               | _ -> 0 % invalid

let init-state seed stt =
  let-rec iter | [] _ = ()
               | (c::cs) (v::vs) =
    let () = c <- v in iter cs vs
               | _ _ = () in % invalid
  let seedx = seed * 2 + 1 in % must be odd
  let () = iter stt (seedx :: init-values) in
  repeat warmup-count next-state stt

%-------------------
let create seed =
  let stt = new-state () in
  let () = init-state seed stt in stt
let bits-with stt =
  let v = (next-state stt) mod modulus in
  if v < 0 then v + modulus else v
let-rec int-with stt ub =
  if 0 < ub && ub < modulus then
    let bv = bits-with stt in
    if bv < modulus / ub * ub then bv mod ub
    else int-with stt ub
  else invalid-arg `bad upper-bound value`
let float-with stt ub =
  if 0pt <' 1pt *' ub then
    let bv = bits-with stt in
    float bv /. float modulus *. ub
  else invalid-arg `bad upper-bound value`
let bool-with stt =
  let bv = bits-with stt in
  (bv / 131072) mod 2 == 1

%-------------------
let fixed = create fixed-instance-seed
let init seed = init-state seed fixed
let bits () = bits-with fixed
let int ub = int-with fixed ub
let float ub = float-with fixed ub
let bool () = bool-with fixed

end
%=========================================================== all done
%% EOF
