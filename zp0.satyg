% zp0.satyg: ZR modules for pervasive things
%
% Copyright (c) 2019-2020 Takayuki YATO (aka. "ZR")
%   GitHub:   https://github.com/zr-tex8r
%   Twitter:  @zr_tex8r
% Distributed under the MIT License.
@import: zexn0

%=========================================================== module ZP0
module ZP0 : sig

% Something like OCaml's Pervasives module.
% Note: Type int is assumed to be 63-bit wide.

val invalid-arg : string -> 'a
val failwith : string -> 'a

% These are int functions unlike OCaml.
val min : int -> int -> int
val max : int -> int -> int

val succ : int -> int
val pred : int -> int
val abs : int -> int
val max-int : int
val min-int : int

% OCaml's (**)
val pow : float -> float -> float

val sqrt : float -> float
val exp : float -> float
val log : float -> float
val log10 : float -> float
val ceil : float -> float
val floor : float -> float
val abs-float : float -> float
val mod-float : float -> float -> float
val frexp : float -> float * int
val ldexp : float -> int -> float
val float-of-int : int -> float
val truncate : float -> int
val int-of-float : float -> int
val max-float : float
val min-float : float
val epsilon-float : float

% Returns the negative of the given float.
val fneg : float -> float
% Whether the given two floats are equal.
% Note: Beware that floats are inexact.
val fequal : float -> float -> bool
% Returns the smaller of the given two floats.
val fmin : float -> float -> float
% Returns the greater of the given two floats.
val fmax : float -> float -> float

val ignore : 'a -> unit
val string-of-bool : bool -> string
val bool-of-string : string -> bool
val bool-of-string-opt : string -> bool option
val string-of-int : int -> string
val int-of-string : string -> int
val int-of-string-opt : string -> int option
val string-of-float : float -> string
val float-of-string : string -> float
val float-of-string-opt : string -> float option
val fst : 'a * 'b -> 'a
val snd : 'a * 'b -> 'b
val incr : int ref -> unit
val decr : int ref -> unit

end = struct

%------------------------------- exceptions
% helpers
let raise = ZExn0.raise
let zexn = ZExn0.make
let z-UNIMPLEMENTED fnam = raise (zexn `Unimplemented` fnam)

let invalid-arg msg = raise (zexn `Invalid_argument` msg)
let failwith msg = raise (zexn `Failure` msg)

%------------------------------- int
let min x y = if x < y then x else y
let max x y = if x > y then x else y
let succ x = x + 1
let pred x = x - 1
let abs x = if x < 0 then - x else x
let max-int = 4611686018427387903 % = 2**62 - 1
let min-int = - max-int - 1

%------------------------------- float
% helpers
let-mutable float-zero <- 0.
let float-error x = x /. !float-zero % division by zero
let sq x = x *. x
let ftrunc x = float (round x)
let log2 = 0.6931471805599453
let sqrt2 = 1.4142135623730951
let (lbig, lmbig) = (65536pt, 0pt -' 65536pt)
let (fmone, lmone) = (0. -. 1., 0pt -' 1pt)
let powseq9 =
  let-rec iter | 0 _ r = r
               | k pow r = iter (k - 1) (sq pow) (pow :: r) in
  iter 10 2. []

let abs-float x =
  let lx = 1pt *' x in
  if lx <' 0pt then 0. -. x else x
let truncate = round
let int-of-float = round
let float-of-int = float
let max-float = % i.e. (pred 1.0) * (2.0 ** 1024)
  let h = 65536.0 |> sq |> sq |> sq |> sq |> sq in
  0.9999999999999999 *. h *. h
let min-float = % i.e. 2.0 ** (-1022)
  let h = 65536.0 |> sq |> sq |> sq |> sq |> sq in
  (4. /. h) /. h
let epsilon-float = 0.0000000000000002220446049250313

% sqrt r = sin(acos(1 - 2r)/2)   (for 0 < r < 1)
let sqrt x =
  let aux x = sin (acos (1. -. x *. 2.) /. 2.) in
  let lx = 1pt *' x in
  if lx >' 0pt then
    if lx >' 1pt then 1. /. aux (1. /. x) else aux x
  else if lx <' 0pt then float-error 0.
  else x

let ldexp x k =
  let-rec iter | 0 _ r = r
               | k b r =
    iter (k / 2) (b *. b) (if k mod 2 == 1 then r *. b else r) in
  if k >= 0 then iter k 2. x else iter (- k) 0.5 x
let frexp =
  let (pow9::_::_::powseq6) = powseq9 in
  let (pow6::_::_::powseq3) = powseq6 in
  let (pow3::_) = powseq3 in
  let (lpow3, lpowm3) = (1pt *' pow3, 1pt *' (1. /. pow3)) in
  let (lpow6, lpowm6) = (1pt *' pow6, 1pt *' (1. /. pow6)) in
  let (lpow9, lpowm9) = (1pt *' pow9, 1pt *' (1. /. pow9)) in
  let (lfmax, lfmin) = (1pt *' max-float, 1pt *' min-float) in
  %
  let-rec aux | x _ [] r = (x /. 2., r + 1)
              | x e (p::ps) r =
    if 1pt *' x <' 1pt *' p then aux x (e / 2) ps r
    else aux (x /. p) (e / 2) ps (r + e) in
  %
  let-rec proc x =
    let lx = 1pt *' x in
    if lx >' 0pt then
      if lx >' lfmax then (x, 0)
      else if lx <' 1pt then
        if lx <' lfmin then
          aux (x *. pow9 *. pow9 *. pow6) 64 powseq6 (-1088)
        else if lx <' lpowm9 then
          aux (x *. pow9 *. pow9) 512 powseq9 (-1024)
        else if lx <' lpowm6 then aux (x *. pow9) 512 powseq9 (-512)
        else if lx <' lpowm3 then aux (x *. pow6) 64 powseq6 (-64)
        else aux (x *. pow3) 8 powseq3 (-8)
      else if lx <' lpow3 then aux x 8 powseq3 0
      else if lx <' lpow6 then aux x 64 powseq6 0
      else aux x 512 powseq9 0
    else if lx <' 0pt then 
      let (r, k) = proc (0. -. x) in (0. -. r, k)
    else (x, 0) in
  proc

let exp x =
  let lx = 1pt *' x in
  if lx >' lbig then float-error 1.
  else if lx <' lmbig then 0.
  else
    let x1 = x /. log2 in
    let k = round (if lx <' 0pt then x1 -. 0.5 else x1 +. 0.5) in
    let x = x -. (float k) *. log2 in
    let xsq = x *. x in
    let t = xsq /. (xsq /. (xsq /. 22. +. 18.) +. 14.) in
    let t = 2. +. xsq /. (xsq /. (t +. 10.) +. 6.) in
    ldexp ((t +. x) /. (t -. x)) k

let log x =
  if 1pt *' x >' 0pt then
    let (_, k) = frexp (x /. sqrt2) in
    let x = x /. (ldexp 1. k) -. 1. in
    let s = 9. *. x /. (2. +. 9. *. x /. 19.) in
    let s = 8. *. x /. (2. +. 8. *. x /. (17. +. s)) in
    let s = 7. *. x /. (2. +. 7. *. x /. (15. +. s)) in
    let s = 6. *. x /. (2. +. 6. *. x /. (13. +. s)) in
    let s = 5. *. x /. (2. +. 5. *. x /. (11. +. s)) in
    let s = 4. *. x /. (2. +. 4. *. x /. (9. +. s)) in
    let s = 3. *. x /. (2. +. 3. *. x /. (7. +. s)) in
    let s = 2. *. x /. (2. +. 2. *. x /. (5. +. s)) in
    let s = 1. *. x /. (2. +. 1. *. x /. (3. +. s)) in
    log2 *. (float k) +. x /. (1. +. s)
  else if 1pt *' x <' 0pt then float-error (0. -. 1.)
  else float-error 0.

let log10 x = (log x) /. 2.30258509299405
let pow x y =
  let (lx, ly) = (1pt *' x, 1pt *' y) in
  if lx >' 0pt then exp ((log x) *. y)
  else if lx <' 0pt then 
    if ly >' 0pt || ly <' 0pt then float-error 0. else 1.
  else if ly >' 0pt then 0.
  else if ly <' 0pt then float-error 1.
  else 1.

let mod-float x y = x -. (ftrunc (x /. y)) *. y

let ceil x =
  if 1pt *' x <' 0pt then ftrunc x
  else 0. -. ftrunc (0. -. x)
let floor x =
  if 1pt *' x <' 0pt then 0. -. ftrunc (0. -. x)
  else ftrunc x

let fneg x = 0. -. x
let fequal x y =
  let (lx, ly) = (1pt *' x, 1pt *' y) in
  not (lx <' ly || lx >' ly)
let fmin x y =
  if 1pt *' x <' 1pt *' y then x else y
let fmax x y =
  if 1pt *' x >' 1pt *' y then x else y

%-------------------------------
let ignore _ = ()

%-------------------------------
let string-of-bool x =
  if x then `true` else `false`
let-rec bool-of-string-opt | `true` = Some true
                           | `false` = Some false
                           | _ = None
let-rec bool-of-string x =
  match bool-of-string-opt x with
  | (Some v) -> v
  | (None) -> invalid-arg `bool-of-string`
let string-of-int = arabic
let string-of-float = show-float

let int-of-string-opt str =
  let len = string-length str in
  let fin a neg = if neg then Some (- a) else Some a in
  let-rec iter-s k =
    if k < len then iter-sc (string-sub str k 1) k
    else (fun _ -> None)
  and iter-sc | `+` k neg = iter-s (k + 1) neg
              | `-` k neg = iter-s (k + 1) (not neg)
              | c k neg = iter-dc c k 0 neg
  and iter-d k =
    if k < len then iter-dc (string-sub str k 1) k
    else fin
  and iter-dc | `0` k a = iter-d (k + 1) (a * 10)
              | `1` k a = iter-d (k + 1) (a * 10 + 1)
              | `2` k a = iter-d (k + 1) (a * 10 + 2)
              | `3` k a = iter-d (k + 1) (a * 10 + 3)
              | `4` k a = iter-d (k + 1) (a * 10 + 4)
              | `5` k a = iter-d (k + 1) (a * 10 + 5)
              | `6` k a = iter-d (k + 1) (a * 10 + 6)
              | `7` k a = iter-d (k + 1) (a * 10 + 7)
              | `8` k a = iter-d (k + 1) (a * 10 + 8)
              | `9` k a = iter-d (k + 1) (a * 10 + 9)
              | _ _ _ = (fun _ -> None) in
  iter-s 0 false

let int-of-string str =
  match int-of-string-opt str with
  | (Some v) -> v
  | (None) -> invalid-arg `int-of-string`

let float-of-string-opt x = z-UNIMPLEMENTED `float-of-string-opt`

let float-of-string x = 
  match float-of-string-opt x with
  | (Some v) -> v
  | (None) -> invalid-arg `float-of-string`

%-------------------------------
let fst (x, y) = x
let snd (x, y) = y

%-------------------------------
let incr r = r <- !r + 1
let decr r = r <- !r - 1

end
%=========================================================== all done
%% EOF
